apply plugin: 'maven-publish'
apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'me.fallenbreath.yamlang'

int mcVersion = project.mcVersion

preprocess {
	tabIndentation = true
}

repositories {
	maven {
		url 'https://jitpack.io'
	}
	maven {
		url 'https://maven.fallenbreath.me/releases'
	}
	maven {
		url "https://masa.dy.fi/maven"
	}
}

// https://github.com/FabricMC/fabric-loader/issues/783
configurations {
	modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}

dependencies {
	// loom
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// dependencies
	include(modImplementation("me.fallenbreath:conditional-mixin-fabric:${project.conditionalmixin_version}"))

	modImplementation "carpet:fabric-carpet:${project.carpet_version}"
}

String MIXIN_CONFIG_PATH = 'template_mod.mixins.json'
String LANG_DIR = 'assets/template_mod/lang'
JavaVersion JAVA_COMPATIBILITY
if (mcVersion >= 12005) {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_21
} else if (mcVersion >= 11800) {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_17
} else if (mcVersion >= 11700) {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_16
} else {
	JAVA_COMPATIBILITY = JavaVersion.VERSION_1_8
}
JavaVersion MIXIN_COMPATIBILITY_LEVEL = JAVA_COMPATIBILITY

loom {
	runConfigs.configureEach {
		// to make sure it generates all "Minecraft Client (:subproject_name)" applications
		ideConfigGenerated = true
		runDir '../../run'
		vmArgs '-Dmixin.debug.export=true'
	}
}

remapJar {
	remapperIsolation = true
}

String artifactVersion = project.mod_version
String finalModVersion = project.mod_version
String fullProjectVersion, fullArtifactVersion

// Example version values:
//   project.mod_version   1.0.3             (the base mod version)
//   finalModVersion       1.0.3             (the actual mod version to use)
//   fullProjectVersion    mc1.15.2-v1.0.3   (in build output jar name)
//   fullArtifactVersion   mc1.15.2-v1.0.3   (maven artifact version)

group = project.maven_group
if (System.getenv("JITPACK") == "true") {
	// move mc version into archivesBaseName, so jitpack will be able to organize archives from multiple subprojects correctly
	base.archivesName = project.archives_base_name + '-mc' + project.minecraft_version
	fullProjectVersion = 'v' + finalModVersion
	fullArtifactVersion = 'v' + artifactVersion
} else {
	base.archivesName = project.archives_base_name
	fullProjectVersion = 'mc' + project.minecraft_version + '-v' + finalModVersion
	fullArtifactVersion = 'mc' + project.minecraft_version + '-v' + artifactVersion
}
version = fullProjectVersion

// See https://youtrack.jetbrains.com/issue/IDEA-296490
// if IDEA complains about "Cannot resolve resource filtering of MatchingCopyAction" and you want to know why
processResources {
	inputs.property "id", project.mod_id
	inputs.property "name", project.mod_name
	inputs.property "version", finalModVersion
	inputs.property "minecraft_dependency", project.minecraft_dependency

	filesMatching("fabric.mod.json") {
		def valueMap = [
				"id": project.mod_id,
				"name": project.mod_name,
				"version": finalModVersion,
				"minecraft_dependency": project.minecraft_dependency,
		]
		expand valueMap
	}

	filesMatching(MIXIN_CONFIG_PATH) {
		filter { s -> s.replace('{{COMPATIBILITY_LEVEL}}', "JAVA_${MIXIN_COMPATIBILITY_LEVEL.ordinal() + 1}") }
	}
}

// https://github.com/Fallen-Breath/yamlang
yamlang {
	targetSourceSets = [sourceSets.main]
	inputDir = LANG_DIR
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
	options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
	if (JAVA_COMPATIBILITY <= JavaVersion.VERSION_1_8) {
		// suppressed "source/target value 8 is obsolete and will be removed in a future release"
		options.compilerArgs << '-Xlint:-options'
	}
}

java {
	sourceCompatibility = JAVA_COMPATIBILITY
	targetCompatibility = JAVA_COMPATIBILITY

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from(rootProject.file('LICENSE')) {
		rename { "${it}_${project.archives_base_name}" }
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId base.archivesName.get()
			from components.java
            version = fullArtifactVersion
		}
	}

	// select the repositories you want to publish to
	repositories {
		mavenLocal()
	}
}
